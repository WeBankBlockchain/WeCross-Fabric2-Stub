---
#
# Copyright Fujitsu Australia Software Technology, IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Aliyz.Network-Config"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value tbs below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The network used in the aliyz integration tests"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section is SDK-specific. The sample below is for the node.js SDK
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: org1

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does
    # not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/hfc-cvs"

    # [Optional]. Specific to Composer environment
    wallet: wallet-name

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  channel-1:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.tbs.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.tbs.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true
        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true
        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true
        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

#      peer0.org2.tbs.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true
#      peer0.org3.tbs.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
#      - basic_01:1

#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: org1MSP
    peers:
      - peer0.org1.tbs.com
    #    certificateAuthorities:
    #      - ca-org1
    adminPrivateKey:
      path: conf/accounts/fabric_admin_org1/account.key
    signedCert:
      #      path: src/test/fixture/sdkintegration/aliyz/crypto-config/peerOrganizations/org1.tbs.com/users/Admin@org1.tbs.com/msp/signcerts/Admin@org1.tbs.com-cert.pem
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org1.tbs.com/users/Admin@org1.tbs.com/msp/signcerts/Admin@org1.tbs.com-cert.pem
      path: conf/accounts/fabric_admin_org1/account.crt
#  org2:
#    mspid: org2MSP
#    peers:
#      - peer0.org2.tbs.com
#    adminPrivateKey:
#      #      path: src/test/fixture/sdkintegration/aliyz/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/keystore/priv_sk
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/keystore/priv_sk
#
#    signedCert:
#      #      path: src/test/fixture/sdkintegration/aliyz/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/signcerts/Admin@org2.tbs.com-cert.pem
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/signcerts/Admin@org2.tbs.com-cert.pem
#  org3:
#    mspid: org3MSP
#    peers:
#      - peer0.org3.tbs.com
#    adminPrivateKey:
#      #      path: src/test/fixture/sdkintegration/aliyz/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/keystore/priv_sk
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org3.tbs.com/users/Admin@org3.tbs.com/msp/keystore/priv_sk
#    signedCert:
#      #      path: src/test/fixture/sdkintegration/aliyz/crypto-config/peerOrganizations/org2.tbs.com/users/Admin@org2.tbs.com/msp/signcerts/Admin@org2.tbs.com-cert.pem
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org3.tbs.com/users/Admin@org3.tbs.com/msp/signcerts/Admin@org3.tbs.com-cert.pem
#

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.tbs.com:
    url: grpcs://127.0.0.1:7050
    grpcOptions:
      ssl-target-name-override: orderer.tbs.com
      sslProvider: openSSL
      negotiationType: TLS
      hostnameOverride: orderer.tbs.com
      grpc-max-send-message-length: 15
      grpc.keepalive_time_ms: 360000
      grpc.keepalive_timeout_ms: 180000
      grpc.keepalive_without_calls: true
    tlsCACerts:
      path: conf/chains/fabric/orderer-tlsca.crt
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/ordererOrganizations/tbs.com/tlsca/tlsca.tbs.com-cert.pem
#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.tbs.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://127.0.0.1:7051
    grpcOptions:
      grpc.http2.keepalive_time: 15
      ssl-target-name-override: peer0.org1.tbs.com
      negotiationType: TLS
      sslProvider: openSSL
      hostnameOverride: peer0.org1.tbs.com
    #      # TODO: The following causes a NoSuchMethodException to be thrown when sending proposals to the peer...
    #      # grpc.NettyChannelBuilderOption.maxInboundMessageSize: 9000000
    tlsCACerts:
      path: conf/chains/fabric/org1-tlsca.crt
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org1.tbs.com/peers/peer0.org1.tbs.com/tls/server.crt
#  peer0.org2.tbs.com:
#    url: grpcs://192.168.1.30:7051
#    grpcOptions:
#      grpc.http2.keepalive_time: 15
#      ssl-target-name-override: peer0.org2.tbs.com
#      negotiationType: TLS
#      sslProvider: openSSL
#      hostnameOverride: peer0.org2.tbs.com
#      # TODO: The following causes a NoSuchMethodException to be thrown when sending proposals to the peer...
#      # grpc.NettyChannelBuilderOption.maxInboundMessageSize: 9000000
#    tlsCACerts:
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org2.tbs.com/peers/peer0.org2.tbs.com/tls/server.crt
#  peer0.org3.tbs.com:
#    url: grpcs://192.168.1.34:7051
#    grpcOptions:
#      grpc.http2.keepalive_time: 15
#      ssl-target-name-override: peer0.org3.tbs.com
#      negotiationType: TLS
#      sslProvider: openSSL
#      hostnameOverride: peer0.org3.tbs.com
#      # TODO: The following causes a NoSuchMethodException to be thrown when sending proposals to the peer...
#      # grpc.NettyChannelBuilderOption.maxInboundMessageSize: 9000000
#    tlsCACerts:
#      path: /Users/mirsu/Documents/blockchain/wecross/aliyz-case/plugin/fabric-sdk/src/main/resources/crypto-config/peerOrganizations/org3.tbs.com/peers/peer0.org3.tbs.com/tls/server.crt
#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
#certificateAuthorities:
#  ca-org1:
#    url: http://localhost:7054
#    # the properties specified under this object are passed to the 'http' client verbatim when
#    # making the request to the Fabric-CA server
##    httpOptions:
##      verify: true
#
#    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
#    # needed to enroll and invoke new users.
#    registrar: #single entitiy
#      enrollId: admin
#      enrollSecret: adminpw
#    # [Optional] The optional name of the CA.
#    caName: ca0
